ДЗ 37
Домашнее задание
Обновление моделей

Цель:
В этом ДЗ вы будете оборачивать ML-модели в REST-интерфейс и запускать в k8s.


Описание/Пошаговая инструкция выполнения домашнего задания:
Напишите на python REST API для вашей модели.
Настройте на github actions CI/CD с тестами, сборкой docker и его публикацией в registry.
Создайте k8s манифест для запуска вашего сервиса.
Создайте в YC k8s кластер из 3-х узлов.
Запустите ваш сервис в k8s и проведите тестирование через публичный API.





д3 урок 37 
Вот общий план для реализации всего процесса, начиная с написания REST API на Python до развертывания в Kubernetes и тестирования через публичный API. 

### 1. Написание REST API на Python

Для создания REST API на Python можно использовать фреймворк FastAPI:

#### Пример API на FastAPI:

1. Установка FastAPI и Uvicorn (сервер):

   ```bash
   pip install fastapi uvicorn
   ```

2. Напишите код для вашего API:

   ```python
   from fastapi import FastAPI
   from pydantic import BaseModel

   app = FastAPI()

   class Item(BaseModel):
       name: str
       description: str
       price: float
       tax: float = None

   @app.post("/items/")
   async def create_item(item: Item):
       return {"name": item.name, "price_with_tax": item.price + (item.tax or 0)}

   if __name__ == "__main__":
       import uvicorn
       uvicorn.run(app, host="0.0.0.0", port=8000)
   ```

3. Запуск приложения локально:

   ```bash
   uvicorn main:app --reload
   ```

### 2. Настройка GitHub Actions для CI/CD с Docker

1. Создайте `.github/workflows/main.yml` файл для автоматизации CI/CD:

```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Установка Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn

      # Запуск тестов
      - name: Run tests
        run: |
          pytest

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      
      - name: Build Docker image
        run: |
          docker build -t your-docker-registry/your-image-name:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push to Docker Hub
        run: docker push your-docker-registry/your-image-name:latest
```

2. Добавьте переменные среды для DockerHub в GitHub Secrets: `DOCKER_USERNAME` и `DOCKER_PASSWORD`.

3. Создайте `Dockerfile` для сборки контейнера:

   ```Dockerfile
   FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

   COPY ./app /app

   WORKDIR /app

   RUN pip install -r requirements.txt

   CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
   ```

### 3. Создание манифеста Kubernetes для развертывания

Создайте файл `deployment.yaml` для Kubernetes манифеста:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fastapi-app
  template:
    metadata:
      labels:
        app: fastapi-app
    spec:
      containers:
      - name: fastapi-app
        image: your-docker-registry/your-image-name:latest
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
spec:
  selector:
    app: fastapi-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
```

### 4. Создание K8s кластера в Yandex Cloud
(есть альтернативное создание кластера - terraform см урок 35)

1. Установите CLI Yandex Cloud и авторизуйтесь:

   ```bash
   yc init
   ```

2. Создайте кластер Kubernetes:

   ```bash
   yc managed-kubernetes cluster create \
     --name my-k8s-cluster \
     --zone ru-central1-a \
     --node-service-account-name my-sa \
     --public-ip \
     --node-labels env=prod \
     --node-group-name my-node-group \
     --node-amount 3 \
     --node-platform "standard-v1"
   ```

3. Настройте kubectl для подключения к кластеру:

   ```bash
   yc managed-kubernetes cluster get-credentials my-k8s-cluster --external
   ```

### 5. Деплой в Kubernetes

1. Примените манифесты в Kubernetes:

   ```bash
   kubectl apply -f deployment.yaml
   ```

2. Убедитесь, что сервис работает:

   ```bash
   kubectl get svc
   ```

### 6. Тестирование публичного API

1. Найдите внешний IP вашего LoadBalancer:

   ```bash
   kubectl get svc fastapi-service
   ```

2. Используйте Postman или curl для тестирования API:

   ```bash
   curl -X POST "http://<external-ip>/items/" -H "Content-Type: application/json" -d '{"name": "item", "description": "test", "price": 100, "tax": 10}'
   ```

Этот план должен охватывать весь процесс от разработки до развертывания и тестирования.   